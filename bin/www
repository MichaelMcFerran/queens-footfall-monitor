#!/usr/bin/env node
var debug = require('debug')('server');
var app = require('../app');

app.set('port', process.env.PORT || 3000); //change from 3000 to work locally to match client

var server = app.listen(app.get('port'), function() {
  debug('Express server listening on port ' + server.address().port);
});

    //connection to database hosted on cleardB with heroku
    var mysql = require('mysql');

    // var con = mysql.createConnection({
    //   host: "eu-cdbr-west-03.cleardb.net",
    //   user: "b357da7f3209b9",
    //   password: "f1318198",
    //   database : 'heroku_58f73cf4b46766d'
    // });
    
    //user details to connect to database. Will pass into creating the sql connection
    var db_param = {
    host: "eu-cdbr-west-03.cleardb.net",
    user: "b357da7f3209b9",
    password: "f1318198",
    database : 'heroku_58f73cf4b46766d'
  };
    //create connection to dB, got help for reconnection from https://github.com/mysqljs/mysql/issues/1478
    // var con = mysql.createConnection(db_param);

//     //- Establish a new connection
// con.connect(function(err){
//   if(err) {
//       // mysqlErrorHandling(connection, err);
//       console.log("\n\t *** Cannot establish a connection with the database. ***");

//       con = reconnect(con);
//   }else {
//       console.log("\n\t *** New connection established with the database. ***")
//   }
// });
    //- Reconnection function 
//   function reconnect(con){
//   console.log("\n New connection coming...");

//   //- Destroy the current connection variable
//   if(con) con.destroy();

//   //- Create a new one
//   var con = mysql.createConnection(db_param);

//   //- Try to reconnect
//   con.connect(function(err){
//       if(err) {
//           //- Try to connect every 2 seconds.
//           setTimeout(reconnect, 2000);
//       }else {
//           console.log("\n\t *** New connection established with the database. ***")
//           return con;
//       }
//   });
// }

var con = mysql.createPool(db_param);
//- Establish a new connection
//-
// con.getConnection(function(err){
//   if(err) {
//       // mysqlErrorHandling(connection, err);
//       console.log("\n\t *** Cannot establish a connection with the database. ***");

//       con = reconnect(con);
//   }else {
//       console.log("\n\t *** New connection established with the database. ***")
//   }
// });

//- Reconnection function
//-
// function reconnect(con){
//   console.log("\n New connection tentative...");

//   //- Create a new one
//   con = mysql.createPool(db_param);

//   //- Try to reconnect
//   con.getConnection(function(err){
//       if(err) {
//           //- Try to connect every 2 seconds.
//           setTimeout(reconnect(con), 2000);
//       }else {
//           console.log("\n\t *** New connection established with the database. ***")
//           return con;
//       }
//   });
// }

//- Error listener
//-
con.on('error', function(err) {

  //-
  //- The server close the connection.
  //-
  if(err.code === "PROTOCOL_CONNECTION_LOST"){    
      console.log("/!\\ Cannot establish a database connection. /!\\ ("+err.code+")");
      return reconnect(con);
  }

  else if(err.code === "PROTOCOL_ENQUEUE_AFTER_QUIT"){
      console.log("/!\\ Cannot establish a database connection. /!\\ ("+err.code+")");
      return reconnect(con);
  }

  else if(err.code === "PROTOCOL_ENQUEUE_AFTER_FATAL_ERROR"){
      console.log("/!\\ Cannot establish a database connection. /!\\ ("+err.code+")");
      return reconnect(con);
  }

  else if(err.code === "PROTOCOL_ENQUEUE_HANDSHAKE_TWICE"){
      console.log("/!\\ Cannot establish a database connection. /!\\ ("+err.code+")");
  }

  else{
      console.log("/!\\ Cannot establish a database connection. /!\\ ("+err.code+")");
      return reconnect(con);
  }

});

var io = require("socket.io").listen(server);

io.on("connection", function(socket){
  console.log("Client Connected");

  //this takes state change from front end web page
//   socket.on("stateChanged", function(state){
//     console.log("State Changed: " + state);
//     io.emit("updateState", state); // submits change to pi client
//   });
  
   //this needs to be named for each room specific pi, and is modualr so can be scaled up for an amount of Pis
   //so change name of count if others present! may need to go back to client code and change that naming too
   socket.on("counter", function(count){
    
     console.log("Person Count " + count); //see count in server console for testing
     io.emit("updatecount", count); // submits change to listening html client
     //update dB
    //  con.connect(function(err) {
      con.getConnection(function(err) {
     
      if (err) throw err;  
      //RoomId and buildingID values specific to each room and sensor as differentiate between each other in dB
    //fixed, string building to include passed count var
      var FootfallCSBLab1 = "INSERT INTO FMusers ( RoomID, BuildingID, CurrentFootfall) VALUES (1, 1, " + con.escape(count) + ")";

      //test to check uploads before passing param
      //console.log("connected to dB");
      //var FootfallCSBLab1 = "INSERT INTO `FMusers` ( `RoomID`, `BuildingID`, `CurrentFootfall`) VALUES (2, 2, 25 )";
      con.query(FootfallCSBLab1, function (err, result, fields) {
        if (err) throw err;
        //test to know if it uploads
        // var resultLo = result;
        // console.log(resultLo);        console.log("inserted footfall count to dB");
        //calls reconnection function to allow future db inserts
        // con = reconnect(con);

      });
      // //calls reconnection function to allow future db inserts
      // con = reconnect(con);
    });
          // //calls reconnection function to allow future db inserts
          // con = reconnect(con);
   });

});
//trying to pass vars to monitor page
// app.get('/',(req, res) => {
//   con.connect(function(err) {
//   if(err) throw err;
//       else {
//           con.query("SELECT * FROM FMusers",(err, result) => {
//               if(err) {
//                   console.log(err); 
//                   res.json({"error":true});
//               }
//               else { 
//                   console.log(result); 
//                   res.json(result); 
//                   res.sendFile(__dirname + "/monitor");
                
//               }
//           });
//       }
//   });
// });



        //test upload to db and update , used be inside socket.on and inside io.on
     //connection to db test
     //var mysql = require('mysql'); //fix
    //  var mysql = require('../node_modules/mysql'); //fix ?
    // var mysql = require('../mysql'); //fix ?

    //  var con = mysql.createConnection({
    //    host: "eu-cdbr-west-03.cleardb.net",
    //    user: "b357da7f3209b9",
    //    password: "f1318198",
    //    database : 'heroku_58f73cf4b46766d'
    //  });
    //  //one per room to take in data
    //  //  this for example is csb first floor lab
    //  con.connect(function(err) {
    //      if (err) throw err;
    //      console.log("connected");
    //      //insert passed footfall from sensor
    //      var counts = count;
    //      con.query("INSERT INTO `FMusers` (BuildingID, RoomID, CurrentFootfall) VALUES ('1', '1', '4');", function (err, result, fields) {
    //        if (err) throw err;
    //        var resultLo = result;
    //        console.log(resultLo);
    //      });
    //    });

        // //test to check if connection works
    // con.connect(function(err) {
    //     if (err) throw err;
    //     var log = "SELECT * FROM FMusers"
    //     con.query(log, function (err, result, fields) {
    //       if (err) throw err;
    //       var resultLo = result;
    //       console.log(resultLo);
    //     });
    //   });

    //works!
    // con.connect(function(err) {
    //   if (err) throw err;  
    //   //RoomId and buildingID values specific to each room and sensor as differentiate between each other in dB
    //   //var countL1CSB = count;
    //   //var FootfallCSBLab1 = "INSERT INTO `FMusers` ( `RoomID`, `BuildingID`, `CurrentFootfall`) VALUES (1, 1,  )" + connection.escape(count) ;
    //   //test to check uploads before passing param
    //   console.log("connected to dB");
    //   var FootfallCSBLab1 = "INSERT INTO `FMusers` ( `RoomID`, `BuildingID`, `CurrentFootfall`) VALUES (2, 2, 34 )";
    //   con.query(FootfallCSBLab1, function (err, result, fields) {
    //     if (err) throw err;
    //     //test to know if it uploads
    //     // var resultLo = result;
    //     // console.log(resultLo);
    //     console.log("inserted footfall count to dB");
    //   });
    // });

